{"ast":null,"code":"var _jsxFileName = \"/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/utilities/ProviderList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types'; // material-ui\n\nimport { Box, Card, Grid, Button } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid'; // project imports\n\nimport SubCard from 'ui-component/cards/SubCard';\nimport MainCard from 'ui-component/cards/MainCard';\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\nimport { gridSpacing } from 'store/constant';\nimport { providerColumns } from 'assets/columns/gridData';\nimport { HOST_NAME } from 'config';\nimport axios from 'axios'; // ===============================|| SHADOW BOX ||=============================== //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ShadowBox = _ref => {\n  let {\n    shadow\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      mb: 3,\n      boxShadow: shadow\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        py: 4.5,\n        bgcolor: 'primary.light',\n        color: 'grey.800'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          color: 'inherit'\n        },\n        children: [\"boxShadow: \", shadow]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ShadowBox;\nShadowBox.propTypes = {\n  shadow: PropTypes.string.isRequired\n}; // ============================|| UTILITIES SHADOW ||============================ //\n\nconst ProviderList = () => {\n  _s();\n\n  const [rows, setRows] = useState([]);\n  const [showRemovedButton, setShowRemovedButton] = useState(false);\n  const [selectedProvider, setSelectedProvider] = useState([]);\n\n  const GetAllProvider = async (offset, limit) => {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const res = await axios.post('http://HOST_NAME:3010/v1/api/tastie/admin/get-all-provider', {\n        limit,\n        offset\n      }, config);\n\n      if (res.data.status) {\n        setRows(res.data.response.filter(item => item.status !== 3));\n      }\n    } catch (error) {\n      console.error('Cannot get all providers', error);\n    }\n  };\n\n  const handleRemoveProvider = async providerList => {\n    // this function get the array of provider_id to be removed => remove multiple providers\n    try {\n      const removeUser = async providerId => {\n        const res = await axios.put(`http://HOST_NAME:3010/v1/api/tastie/admin/remove-provider/${providerId}`);\n        return res.data;\n      };\n\n      const queryList = [];\n      providerList.forEach(providerId => {\n        queryList.push(removeUser(providerId)); // get the query list of removing providers\n      });\n      Promise.all(queryList).then(values => {\n        console.log('Response from removing providers', values);\n        GetAllProvider(1, 10000000); // reload the screen with new data\n      });\n    } catch (error) {\n      console.error('Cannot remove providers', error);\n    }\n  };\n\n  useEffect(() => {\n    GetAllProvider(1, 100000000);\n  }, []);\n  useEffect(() => {\n    setShowRemovedButton(selectedProvider.length > 0);\n  }, [selectedProvider]);\n  return /*#__PURE__*/_jsxDEV(MainCard, {\n    title: \"Provider List\",\n    secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: showRemovedButton && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"error\",\n        onClick: () => handleRemoveProvider(selectedProvider),\n        children: \"Remove provider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }, this)\n    }, void 0, false),\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: providerColumns,\n      pageSize: 50 // rowsPerPageOptions={[40]}\n      ,\n      checkboxSelection: true,\n      disableSelectionOnClick: true,\n      getRowId: row => row.provider_id,\n      sx: {\n        width: '100%',\n        height: 500\n      },\n      onSelectionModelChange: providerList => {\n        setSelectedProvider(providerList);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProviderList, \"WVNVe93aRa6z0zYhW/QwPFL+iAA=\");\n\n_c2 = ProviderList;\nexport default ProviderList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ShadowBox\");\n$RefreshReg$(_c2, \"ProviderList\");","map":{"version":3,"sources":["/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/utilities/ProviderList.js"],"names":["React","useEffect","useState","PropTypes","Box","Card","Grid","Button","DataGrid","SubCard","MainCard","SecondaryAction","gridSpacing","providerColumns","HOST_NAME","axios","ShadowBox","shadow","mb","boxShadow","display","justifyContent","alignItems","py","bgcolor","color","propTypes","string","isRequired","ProviderList","rows","setRows","showRemovedButton","setShowRemovedButton","selectedProvider","setSelectedProvider","GetAllProvider","offset","limit","config","headers","res","post","data","status","response","filter","item","error","console","handleRemoveProvider","providerList","removeUser","providerId","put","queryList","forEach","push","Promise","all","then","values","log","length","row","provider_id","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Card, Grid, Button } from '@mui/material';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n\r\n// project imports\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { providerColumns } from 'assets/columns/gridData';\r\nimport { HOST_NAME } from 'config';\r\n\r\nimport axios from 'axios';\r\n\r\n// ===============================|| SHADOW BOX ||=============================== //\r\n\r\nconst ShadowBox = ({ shadow }) => (\r\n    <Card sx={{ mb: 3, boxShadow: shadow }}>\r\n        <Box\r\n            sx={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                py: 4.5,\r\n                bgcolor: 'primary.light',\r\n                color: 'grey.800'\r\n            }}\r\n        >\r\n            <Box sx={{ color: 'inherit' }}>boxShadow: {shadow}</Box>\r\n        </Box>\r\n    </Card>\r\n);\r\n\r\nShadowBox.propTypes = {\r\n    shadow: PropTypes.string.isRequired\r\n};\r\n\r\n// ============================|| UTILITIES SHADOW ||============================ //\r\n\r\nconst ProviderList = () => {\r\n    const [rows, setRows] = useState([]);\r\n    const [showRemovedButton, setShowRemovedButton] = useState(false);\r\n    const [selectedProvider, setSelectedProvider] = useState([]);\r\n\r\n    const GetAllProvider = async (offset, limit) => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            };\r\n            const res = await axios.post(\r\n                'http://HOST_NAME:3010/v1/api/tastie/admin/get-all-provider',\r\n                {\r\n                    limit,\r\n                    offset\r\n                },\r\n                config\r\n            );\r\n\r\n            if (res.data.status) {\r\n                setRows(res.data.response.filter((item) => item.status !== 3));\r\n            }\r\n        } catch (error) {\r\n            console.error('Cannot get all providers', error);\r\n        }\r\n    };\r\n\r\n    const handleRemoveProvider = async (providerList) => {\r\n        // this function get the array of provider_id to be removed => remove multiple providers\r\n        try {\r\n            const removeUser = async (providerId) => {\r\n                const res = await axios.put(`http://HOST_NAME:3010/v1/api/tastie/admin/remove-provider/${providerId}`);\r\n\r\n                return res.data;\r\n            };\r\n            const queryList = [];\r\n            providerList.forEach((providerId) => {\r\n                queryList.push(removeUser(providerId)); // get the query list of removing providers\r\n            });\r\n            Promise.all(queryList).then((values) => {\r\n                console.log('Response from removing providers', values);\r\n                GetAllProvider(1, 10000000); // reload the screen with new data\r\n            });\r\n        } catch (error) {\r\n            console.error('Cannot remove providers', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        GetAllProvider(1, 100000000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setShowRemovedButton(selectedProvider.length > 0);\r\n    }, [selectedProvider]);\r\n\r\n    return (\r\n        <MainCard\r\n            title=\"Provider List\"\r\n            secondary={\r\n                <>\r\n                    {showRemovedButton && (\r\n                        <Button variant=\"contained\" color=\"error\" onClick={() => handleRemoveProvider(selectedProvider)}>\r\n                            Remove provider\r\n                        </Button>\r\n                    )}\r\n                </>\r\n            }\r\n        >\r\n            <DataGrid\r\n                rows={rows}\r\n                columns={providerColumns}\r\n                pageSize={50}\r\n                // rowsPerPageOptions={[40]}\r\n                checkboxSelection\r\n                disableSelectionOnClick\r\n                getRowId={(row) => row.provider_id}\r\n                sx={{ width: '100%', height: 500 }}\r\n                onSelectionModelChange={(providerList) => {\r\n                    setSelectedProvider(providerList);\r\n                }}\r\n            />\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default ProviderList;\r\n"]},"metadata":{},"sourceType":"module"}