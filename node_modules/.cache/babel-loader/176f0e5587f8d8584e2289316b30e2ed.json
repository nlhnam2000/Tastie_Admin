{"ast":null,"code":"var _jsxFileName = \"/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/utilities/UserList.js\",\n    _s = $RefreshSig$();\n\n// import React\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Link, Button, Dialog, DialogActions, DialogContentText, DialogTitle, DialogContent, Typography } from '@mui/material';\nimport MuiTypography from '@mui/material/Typography';\nimport { DataGrid } from '@mui/x-data-grid'; // project imports\n\nimport SubCard from 'ui-component/cards/SubCard';\nimport MainCard from 'ui-component/cards/MainCard';\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\nimport { gridSpacing } from 'store/constant';\nimport { userColumns } from 'assets/columns/gridData'; // import library\n\nimport axios from 'axios'; // ==============================|| TYPOGRAPHY ||============================== //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserList = () => {\n  _s();\n\n  const [rows, setRows] = useState([]);\n  const [openDialog, setOpenDialog] = useState(false);\n  useEffect(() => {\n    const GetAllUser = async (offset, limit) => {\n      try {\n        const config = {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n        const res = await axios.post('http://localhost:3010/v1/api/tastie/admin/get-all-user', {\n          limit,\n          offset\n        }, config);\n\n        if (res.data.status) {\n          setRows(res.data.response);\n        }\n      } catch (error) {\n        console.error('Cannot get all user', error);\n      }\n    };\n\n    GetAllUser(1, 1000000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MainCard, {\n    title: \"User list\",\n    secondary: /*#__PURE__*/_jsxDEV(Button, {\n      disableElevation: true,\n      variant: \"contained\",\n      onClick: () => setOpenDialog(true),\n      children: \"Add User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: userColumns // pageSize={50}\n      // rowsPerPageOptions={[40]}\n      ,\n      checkboxSelection: true,\n      disableSelectionOnClick: true,\n      getRowId: row => row.user_id,\n      sx: {\n        width: '100%',\n        height: 500\n      } // onPageChange={(page) => alert(page)}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Dialog, {\n        open: openDialog,\n        onClose: () => setOpenDialog(false),\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          id: \"alert-dialog-title\",\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h1\",\n            children: \"Are you sure to apply the changes ?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n            id: \"alert-dialog-description\",\n            children: \"This action will change the original record. Would you like to apply change ?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setOpenDialog(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            autoFocus: true,\n            children: \"Apply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserList, \"VARKFE7hBZCVJUtZRW9nAKzlzp0=\");\n\n_c = UserList;\nexport default UserList;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserList\");","map":{"version":3,"sources":["/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/utilities/UserList.js"],"names":["React","useEffect","useState","Grid","Link","Button","Dialog","DialogActions","DialogContentText","DialogTitle","DialogContent","Typography","MuiTypography","DataGrid","SubCard","MainCard","SecondaryAction","gridSpacing","userColumns","axios","UserList","rows","setRows","openDialog","setOpenDialog","GetAllUser","offset","limit","config","headers","res","post","data","status","response","error","console","row","user_id","width","height"],"mappings":"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","sourcesContent":["// import React\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { Grid, Link, Button, Dialog, DialogActions, DialogContentText, DialogTitle, DialogContent, Typography } from '@mui/material';\r\nimport MuiTypography from '@mui/material/Typography';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n\r\n// project imports\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { userColumns } from 'assets/columns/gridData';\r\n\r\n// import library\r\nimport axios from 'axios';\r\n\r\n// ==============================|| TYPOGRAPHY ||============================== //\r\n\r\nconst UserList = () => {\r\n    const [rows, setRows] = useState([]);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const GetAllUser = async (offset, limit) => {\r\n            try {\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                };\r\n                const res = await axios.post(\r\n                    'http://localhost:3010/v1/api/tastie/admin/get-all-user',\r\n                    {\r\n                        limit,\r\n                        offset\r\n                    },\r\n                    config\r\n                );\r\n\r\n                if (res.data.status) {\r\n                    setRows(res.data.response);\r\n                }\r\n            } catch (error) {\r\n                console.error('Cannot get all user', error);\r\n            }\r\n        };\r\n\r\n        GetAllUser(1, 1000000);\r\n    }, []);\r\n\r\n    return (\r\n        <MainCard\r\n            title=\"User list\"\r\n            secondary={\r\n                <Button disableElevation variant=\"contained\" onClick={() => setOpenDialog(true)}>\r\n                    Add User\r\n                </Button>\r\n            }\r\n        >\r\n            <DataGrid\r\n                rows={rows}\r\n                columns={userColumns}\r\n                // pageSize={50}\r\n                // rowsPerPageOptions={[40]}\r\n                checkboxSelection\r\n                disableSelectionOnClick\r\n                getRowId={(row) => row.user_id}\r\n                sx={{ width: '100%', height: 500 }}\r\n                // onPageChange={(page) => alert(page)}\r\n            />\r\n            <div>\r\n                <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\r\n                    <DialogTitle id=\"alert-dialog-title\">\r\n                        <Typography variant=\"h1\">Are you sure to apply the changes ?</Typography>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                            This action will change the original record. Would you like to apply change ?\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\r\n                        <Button autoFocus>Apply</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default UserList;\r\n"]},"metadata":{},"sourceType":"module"}