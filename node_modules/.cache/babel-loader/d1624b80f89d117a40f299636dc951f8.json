{"ast":null,"code":"var _jsxFileName = \"/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/dashboard/Default/TotalGrowthBarChart.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux'; // material-ui\n\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, MenuItem, TextField, Typography } from '@mui/material'; // third-party\n\nimport ApexCharts from 'apexcharts';\nimport Chart from 'react-apexcharts'; // project imports\n\nimport SkeletonTotalGrowthBarChart from 'ui-component/cards/Skeleton/TotalGrowthBarChart';\nimport MainCard from 'ui-component/cards/MainCard';\nimport { gridSpacing } from 'store/constant'; // chart data\n\nimport chartData from './chart-data/total-growth-bar-chart'; // libraries\n\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst status = [{\n  value: 'today',\n  label: 'Today'\n}, {\n  value: 'month',\n  label: 'This Month'\n}, {\n  value: 'year',\n  label: 'This Year'\n}]; // ==============================|| DASHBOARD DEFAULT - TOTAL GROWTH BAR CHART ||============================== //\n\nconst TotalGrowthBarChart = _ref => {\n  _s();\n\n  let {\n    isLoading,\n    type\n  } = _ref;\n  const [value, setValue] = useState('today');\n  const theme = useTheme();\n  const customization = useSelector(state => state.customization);\n  const [data, setData] = useState([]);\n  const {\n    navType\n  } = customization;\n  const {\n    primary\n  } = theme.palette.text;\n  const darkLight = theme.palette.dark.light;\n  const grey200 = theme.palette.grey[200];\n  const grey500 = theme.palette.grey[500];\n  const primary200 = theme.palette.primary[200];\n  const primaryDark = theme.palette.primary.dark;\n  const secondaryMain = theme.palette.secondary.main;\n  const secondaryLight = theme.palette.secondary.light;\n\n  const toMonths = data => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    return data.map(item => months[item - 1]);\n  };\n\n  const getSum = (data, type) => {\n    let sum = 0.0;\n    data.forEach(d => {\n      if (type === 1) {\n        sum += d.totalRevenue;\n      } else if (type === 2) {\n        sum += d.numberOrder;\n      } else if (type === 3) {\n        sum += d.totalRevenue / d.numberOrder;\n      }\n    });\n    return sum;\n  };\n\n  const LoadData = async () => {\n    try {\n      const res = await axios.get('http://localhost:3010/v1/api/tastie/admin/statics-of-total-revenue-in-the-last-12-month');\n\n      if (res.data.status && res.data.response.length > 0) {\n        setData(res.data.response.reverse());\n      }\n    } catch (error) {\n      console.error('Cannot get data of last 12 months');\n    } finally {\n      console.log(customization);\n    }\n  };\n\n  useEffect(() => {\n    LoadData();\n  }, []);\n  useEffect(() => {\n    const newChartData = { ...chartData.options,\n      colors: [primary200, primaryDark, secondaryMain, secondaryLight],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary]\n          }\n        },\n        categories: toMonths([...data].map(item => item.month))\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: grey200\n      },\n      tooltip: {\n        theme: 'light'\n      },\n      legend: {\n        labels: {\n          colors: grey500\n        }\n      } // series: [\n      //     {\n      //         name: type === 1 ? 'Total revenue' : type === 2 ? 'Total sale' : 'Total sale',\n      //         data: [...data].map((item) => {\n      //             if (type === 1) {\n      //                 return parseFloat(item.totalRevenue).toFixed(2);\n      //             } else if (type === 2) {\n      //                 return item.numberOrder;\n      //             } else if (type === 3) {\n      //                 return item.totalRevenue / item.numberOrder;\n      //             }\n      //         })\n      //     }\n      // ]\n\n    };\n\n    if (type === 1) {\n      newChartData.series = [{\n        name: 'Total revenue',\n        data: [...data].map(item => parseFloat(item.totalRevenue).toFixed(2))\n      }];\n    } else if (type === 2) {\n      newChartData.series = [{\n        name: 'Total sale',\n        data: [...data].map(item => item.numberOrder)\n      }];\n    } // do not load chart when loading\n\n\n    if (!isLoading) {\n      ApexCharts.exec(`bar-chart`, 'updateOptions', newChartData);\n    }\n  }, [navType, primary200, primaryDark, secondaryMain, secondaryLight, primary, darkLight, grey200, isLoading, grey500, data, type]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(SkeletonTotalGrowthBarChart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(MainCard, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: gridSpacing,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                direction: \"column\",\n                spacing: 1,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle1\",\n                    children: type === 1 ? 'Total revenu chart' : 'Total sale chart'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h3\",\n                    children: type === 1 ? `$${getSum(data, 1)}` : `${getSum(data, 2)} orders`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"standard-select-currency\",\n                select: true,\n                value: value,\n                onChange: e => setValue(e.target.value),\n                children: status.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: option.value,\n                  children: option.label\n                }, option.value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Chart, { ...chartData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(TotalGrowthBarChart, \"slHOjPi/C9FgNmB/3DakEDUibzU=\", false, function () {\n  return [useTheme, useSelector];\n});\n\n_c = TotalGrowthBarChart;\nTotalGrowthBarChart.propTypes = {\n  isLoading: PropTypes.bool\n};\nexport default TotalGrowthBarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"TotalGrowthBarChart\");","map":{"version":3,"sources":["/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/dashboard/Default/TotalGrowthBarChart.js"],"names":["PropTypes","useState","useEffect","useSelector","useTheme","Grid","MenuItem","TextField","Typography","ApexCharts","Chart","SkeletonTotalGrowthBarChart","MainCard","gridSpacing","chartData","axios","status","value","label","TotalGrowthBarChart","isLoading","type","setValue","theme","customization","state","data","setData","navType","primary","palette","text","darkLight","dark","light","grey200","grey","grey500","primary200","primaryDark","secondaryMain","secondary","main","secondaryLight","toMonths","months","map","item","getSum","sum","forEach","d","totalRevenue","numberOrder","LoadData","res","get","response","length","reverse","error","console","log","newChartData","options","colors","xaxis","labels","style","categories","month","yaxis","grid","borderColor","tooltip","legend","series","name","parseFloat","toFixed","exec","e","target","option","propTypes","bool"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CAEA;;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,UAApC,QAAsD,eAAtD,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,kBAAlB,C,CAEA;;AACA,OAAOC,2BAAP,MAAwC,iDAAxC;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,SAASC,WAAT,QAA4B,gBAA5B,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,qCAAtB,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,MAAM,GAAG,CACX;AACIC,EAAAA,KAAK,EAAE,OADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CADW,EAKX;AACID,EAAAA,KAAK,EAAE,OADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CALW,EASX;AACID,EAAAA,KAAK,EAAE,MADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CATW,CAAf,C,CAeA;;AAEA,MAAMC,mBAAmB,GAAG,QAAyB;AAAA;;AAAA,MAAxB;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAwB;AACjD,QAAM,CAACJ,KAAD,EAAQK,QAAR,IAAoBrB,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAMsB,KAAK,GAAGnB,QAAQ,EAAtB;AACA,QAAMoB,aAAa,GAAGrB,WAAW,CAAEsB,KAAD,IAAWA,KAAK,CAACD,aAAlB,CAAjC;AACA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkB1B,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAM;AAAE2B,IAAAA;AAAF,MAAcJ,aAApB;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAcN,KAAK,CAACO,OAAN,CAAcC,IAAlC;AACA,QAAMC,SAAS,GAAGT,KAAK,CAACO,OAAN,CAAcG,IAAd,CAAmBC,KAArC;AACA,QAAMC,OAAO,GAAGZ,KAAK,CAACO,OAAN,CAAcM,IAAd,CAAmB,GAAnB,CAAhB;AACA,QAAMC,OAAO,GAAGd,KAAK,CAACO,OAAN,CAAcM,IAAd,CAAmB,GAAnB,CAAhB;AAEA,QAAME,UAAU,GAAGf,KAAK,CAACO,OAAN,CAAcD,OAAd,CAAsB,GAAtB,CAAnB;AACA,QAAMU,WAAW,GAAGhB,KAAK,CAACO,OAAN,CAAcD,OAAd,CAAsBI,IAA1C;AACA,QAAMO,aAAa,GAAGjB,KAAK,CAACO,OAAN,CAAcW,SAAd,CAAwBC,IAA9C;AACA,QAAMC,cAAc,GAAGpB,KAAK,CAACO,OAAN,CAAcW,SAAd,CAAwBP,KAA/C;;AAEA,QAAMU,QAAQ,GAAIlB,IAAD,IAAU;AACvB,UAAMmB,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAAf;AAEA,WAAOnB,IAAI,CAACoB,GAAL,CAAUC,IAAD,IAAUF,MAAM,CAACE,IAAI,GAAG,CAAR,CAAzB,CAAP;AACH,GAJD;;AAMA,QAAMC,MAAM,GAAG,CAACtB,IAAD,EAAOL,IAAP,KAAgB;AAC3B,QAAI4B,GAAG,GAAG,GAAV;AACAvB,IAAAA,IAAI,CAACwB,OAAL,CAAcC,CAAD,IAAO;AAChB,UAAI9B,IAAI,KAAK,CAAb,EAAgB;AACZ4B,QAAAA,GAAG,IAAIE,CAAC,CAACC,YAAT;AACH,OAFD,MAEO,IAAI/B,IAAI,KAAK,CAAb,EAAgB;AACnB4B,QAAAA,GAAG,IAAIE,CAAC,CAACE,WAAT;AACH,OAFM,MAEA,IAAIhC,IAAI,KAAK,CAAb,EAAgB;AACnB4B,QAAAA,GAAG,IAAIE,CAAC,CAACC,YAAF,GAAiBD,CAAC,CAACE,WAA1B;AACH;AACJ,KARD;AAUA,WAAOJ,GAAP;AACH,GAbD;;AAeA,QAAMK,QAAQ,GAAG,YAAY;AACzB,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMxC,KAAK,CAACyC,GAAN,CAAU,yFAAV,CAAlB;;AACA,UAAID,GAAG,CAAC7B,IAAJ,CAASV,MAAT,IAAmBuC,GAAG,CAAC7B,IAAJ,CAAS+B,QAAT,CAAkBC,MAAlB,GAA2B,CAAlD,EAAqD;AACjD/B,QAAAA,OAAO,CAAC4B,GAAG,CAAC7B,IAAJ,CAAS+B,QAAT,CAAkBE,OAAlB,EAAD,CAAP;AACH;AACJ,KALD,CAKE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAc,mCAAd;AACH,KAPD,SAOU;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAYtC,aAAZ;AACH;AACJ,GAXD;;AAaAtB,EAAAA,SAAS,CAAC,MAAM;AACZoD,IAAAA,QAAQ;AACX,GAFQ,EAEN,EAFM,CAAT;AAIApD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM6D,YAAY,GAAG,EACjB,GAAGjD,SAAS,CAACkD,OADI;AAEjBC,MAAAA,MAAM,EAAE,CAAC3B,UAAD,EAAaC,WAAb,EAA0BC,aAA1B,EAAyCG,cAAzC,CAFS;AAGjBuB,MAAAA,KAAK,EAAE;AACHC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE;AACHH,YAAAA,MAAM,EAAE,CAACpC,OAAD,EAAUA,OAAV,EAAmBA,OAAnB,EAA4BA,OAA5B,EAAqCA,OAArC,EAA8CA,OAA9C,EAAuDA,OAAvD,EAAgEA,OAAhE,EAAyEA,OAAzE,EAAkFA,OAAlF,EAA2FA,OAA3F,EAAoGA,OAApG;AADL;AADH,SADL;AAMHwC,QAAAA,UAAU,EAAEzB,QAAQ,CAAC,CAAC,GAAGlB,IAAJ,EAAUoB,GAAV,CAAeC,IAAD,IAAUA,IAAI,CAACuB,KAA7B,CAAD;AANjB,OAHU;AAWjBC,MAAAA,KAAK,EAAE;AACHJ,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE;AACHH,YAAAA,MAAM,EAAE,CAACpC,OAAD;AADL;AADH;AADL,OAXU;AAkBjB2C,MAAAA,IAAI,EAAE;AACFC,QAAAA,WAAW,EAAEtC;AADX,OAlBW;AAqBjBuC,MAAAA,OAAO,EAAE;AACLnD,QAAAA,KAAK,EAAE;AADF,OArBQ;AAwBjBoD,MAAAA,MAAM,EAAE;AACJR,QAAAA,MAAM,EAAE;AACJF,UAAAA,MAAM,EAAE5B;AADJ;AADJ,OAxBS,CA6BjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1CiB,KAArB;;AA6CA,QAAIhB,IAAI,KAAK,CAAb,EAAgB;AACZ0C,MAAAA,YAAY,CAACa,MAAb,GAAsB,CAClB;AACIC,QAAAA,IAAI,EAAE,eADV;AAEInD,QAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ,EAAUoB,GAAV,CAAeC,IAAD,IAAU+B,UAAU,CAAC/B,IAAI,CAACK,YAAN,CAAV,CAA8B2B,OAA9B,CAAsC,CAAtC,CAAxB;AAFV,OADkB,CAAtB;AAMH,KAPD,MAOO,IAAI1D,IAAI,KAAK,CAAb,EAAgB;AACnB0C,MAAAA,YAAY,CAACa,MAAb,GAAsB,CAClB;AACIC,QAAAA,IAAI,EAAE,YADV;AAEInD,QAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ,EAAUoB,GAAV,CAAeC,IAAD,IAAUA,IAAI,CAACM,WAA7B;AAFV,OADkB,CAAtB;AAMH,KA5DW,CA8DZ;;;AACA,QAAI,CAACjC,SAAL,EAAgB;AACZX,MAAAA,UAAU,CAACuE,IAAX,CAAiB,WAAjB,EAA6B,eAA7B,EAA8CjB,YAA9C;AACH;AACJ,GAlEQ,EAkEN,CAACnC,OAAD,EAAUU,UAAV,EAAsBC,WAAtB,EAAmCC,aAAnC,EAAkDG,cAAlD,EAAkEd,OAAlE,EAA2EG,SAA3E,EAAsFG,OAAtF,EAA+Ff,SAA/F,EAA0GiB,OAA1G,EAAmHX,IAAnH,EAAyHL,IAAzH,CAlEM,CAAT;AAoEA,sBACI;AAAA,cACKD,SAAS,gBACN,QAAC,2BAAD;AAAA;AAAA;AAAA;AAAA,YADM,gBAGN,QAAC,QAAD;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAEP,WAAzB;AAAA,gCACI,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,SAAS,MAAf;AAAgB,YAAA,UAAU,EAAC,QAA3B;AAAoC,YAAA,cAAc,EAAC,eAAnD;AAAA,oCACI,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAA,qCACI,QAAC,IAAD;AAAM,gBAAA,SAAS,MAAf;AAAgB,gBAAA,SAAS,EAAC,QAA1B;AAAmC,gBAAA,OAAO,EAAE,CAA5C;AAAA,wCACI,QAAC,IAAD;AAAM,kBAAA,IAAI,MAAV;AAAA,yCACI,QAAC,UAAD;AAAY,oBAAA,OAAO,EAAC,WAApB;AAAA,8BACKQ,IAAI,KAAK,CAAT,GAAa,oBAAb,GAAoC;AADzC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,wBADJ,eAMI,QAAC,IAAD;AAAM,kBAAA,IAAI,MAAV;AAAA,yCACI,QAAC,UAAD;AAAY,oBAAA,OAAO,EAAC,IAApB;AAAA,8BACKA,IAAI,KAAK,CAAT,GAAc,IAAG2B,MAAM,CAACtB,IAAD,EAAO,CAAP,CAAU,EAAjC,GAAsC,GAAEsB,MAAM,CAACtB,IAAD,EAAO,CAAP,CAAU;AAD7D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADJ,eAeI,QAAC,IAAD;AAAM,cAAA,IAAI,MAAV;AAAA,qCACI,QAAC,SAAD;AACI,gBAAA,EAAE,EAAC,0BADP;AAEI,gBAAA,MAAM,MAFV;AAGI,gBAAA,KAAK,EAAET,KAHX;AAII,gBAAA,QAAQ,EAAGgE,CAAD,IAAO3D,QAAQ,CAAC2D,CAAC,CAACC,MAAF,CAASjE,KAAV,CAJ7B;AAAA,0BAMKD,MAAM,CAAC8B,GAAP,CAAYqC,MAAD,iBACR,QAAC,QAAD;AAA6B,kBAAA,KAAK,EAAEA,MAAM,CAAClE,KAA3C;AAAA,4BACKkE,MAAM,CAACjE;AADZ,mBAAeiE,MAAM,CAAClE,KAAtB;AAAA;AAAA;AAAA;AAAA,wBADH;AANL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAiCI,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAA,iCACI,QAAC,KAAD,OAAWH;AAAX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAjCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAJR,mBADJ;AA+CH,CA1KD;;GAAMK,mB;UAEYf,Q,EACQD,W;;;KAHpBgB,mB;AA4KNA,mBAAmB,CAACiE,SAApB,GAAgC;AAC5BhE,EAAAA,SAAS,EAAEpB,SAAS,CAACqF;AADO,CAAhC;AAIA,eAAelE,mBAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n\r\n// third-party\r\nimport ApexCharts from 'apexcharts';\r\nimport Chart from 'react-apexcharts';\r\n\r\n// project imports\r\nimport SkeletonTotalGrowthBarChart from 'ui-component/cards/Skeleton/TotalGrowthBarChart';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// chart data\r\nimport chartData from './chart-data/total-growth-bar-chart';\r\n\r\n// libraries\r\nimport axios from 'axios';\r\n\r\nconst status = [\r\n    {\r\n        value: 'today',\r\n        label: 'Today'\r\n    },\r\n    {\r\n        value: 'month',\r\n        label: 'This Month'\r\n    },\r\n    {\r\n        value: 'year',\r\n        label: 'This Year'\r\n    }\r\n];\r\n\r\n// ==============================|| DASHBOARD DEFAULT - TOTAL GROWTH BAR CHART ||============================== //\r\n\r\nconst TotalGrowthBarChart = ({ isLoading, type }) => {\r\n    const [value, setValue] = useState('today');\r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n    const [data, setData] = useState([]);\r\n\r\n    const { navType } = customization;\r\n    const { primary } = theme.palette.text;\r\n    const darkLight = theme.palette.dark.light;\r\n    const grey200 = theme.palette.grey[200];\r\n    const grey500 = theme.palette.grey[500];\r\n\r\n    const primary200 = theme.palette.primary[200];\r\n    const primaryDark = theme.palette.primary.dark;\r\n    const secondaryMain = theme.palette.secondary.main;\r\n    const secondaryLight = theme.palette.secondary.light;\r\n\r\n    const toMonths = (data) => {\r\n        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n        return data.map((item) => months[item - 1]);\r\n    };\r\n\r\n    const getSum = (data, type) => {\r\n        let sum = 0.0;\r\n        data.forEach((d) => {\r\n            if (type === 1) {\r\n                sum += d.totalRevenue;\r\n            } else if (type === 2) {\r\n                sum += d.numberOrder;\r\n            } else if (type === 3) {\r\n                sum += d.totalRevenue / d.numberOrder;\r\n            }\r\n        });\r\n\r\n        return sum;\r\n    };\r\n\r\n    const LoadData = async () => {\r\n        try {\r\n            const res = await axios.get('http://localhost:3010/v1/api/tastie/admin/statics-of-total-revenue-in-the-last-12-month');\r\n            if (res.data.status && res.data.response.length > 0) {\r\n                setData(res.data.response.reverse());\r\n            }\r\n        } catch (error) {\r\n            console.error('Cannot get data of last 12 months');\r\n        } finally {\r\n            console.log(customization);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        LoadData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const newChartData = {\r\n            ...chartData.options,\r\n            colors: [primary200, primaryDark, secondaryMain, secondaryLight],\r\n            xaxis: {\r\n                labels: {\r\n                    style: {\r\n                        colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary]\r\n                    }\r\n                },\r\n                categories: toMonths([...data].map((item) => item.month))\r\n            },\r\n            yaxis: {\r\n                labels: {\r\n                    style: {\r\n                        colors: [primary]\r\n                    }\r\n                }\r\n            },\r\n            grid: {\r\n                borderColor: grey200\r\n            },\r\n            tooltip: {\r\n                theme: 'light'\r\n            },\r\n            legend: {\r\n                labels: {\r\n                    colors: grey500\r\n                }\r\n            }\r\n            // series: [\r\n            //     {\r\n            //         name: type === 1 ? 'Total revenue' : type === 2 ? 'Total sale' : 'Total sale',\r\n            //         data: [...data].map((item) => {\r\n            //             if (type === 1) {\r\n            //                 return parseFloat(item.totalRevenue).toFixed(2);\r\n            //             } else if (type === 2) {\r\n            //                 return item.numberOrder;\r\n            //             } else if (type === 3) {\r\n            //                 return item.totalRevenue / item.numberOrder;\r\n            //             }\r\n            //         })\r\n            //     }\r\n            // ]\r\n        };\r\n\r\n        if (type === 1) {\r\n            newChartData.series = [\r\n                {\r\n                    name: 'Total revenue',\r\n                    data: [...data].map((item) => parseFloat(item.totalRevenue).toFixed(2))\r\n                }\r\n            ];\r\n        } else if (type === 2) {\r\n            newChartData.series = [\r\n                {\r\n                    name: 'Total sale',\r\n                    data: [...data].map((item) => item.numberOrder)\r\n                }\r\n            ];\r\n        }\r\n\r\n        // do not load chart when loading\r\n        if (!isLoading) {\r\n            ApexCharts.exec(`bar-chart`, 'updateOptions', newChartData);\r\n        }\r\n    }, [navType, primary200, primaryDark, secondaryMain, secondaryLight, primary, darkLight, grey200, isLoading, grey500, data, type]);\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonTotalGrowthBarChart />\r\n            ) : (\r\n                <MainCard>\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                                <Grid item>\r\n                                    <Grid container direction=\"column\" spacing={1}>\r\n                                        <Grid item>\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                {type === 1 ? 'Total revenu chart' : 'Total sale chart'}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography variant=\"h3\">\r\n                                                {type === 1 ? `$${getSum(data, 1)}` : `${getSum(data, 2)} orders`}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        id=\"standard-select-currency\"\r\n                                        select\r\n                                        value={value}\r\n                                        onChange={(e) => setValue(e.target.value)}\r\n                                    >\r\n                                        {status.map((option) => (\r\n                                            <MenuItem key={option.value} value={option.value}>\r\n                                                {option.label}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Chart {...chartData} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </MainCard>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nTotalGrowthBarChart.propTypes = {\r\n    isLoading: PropTypes.bool\r\n};\r\n\r\nexport default TotalGrowthBarChart;\r\n"]},"metadata":{},"sourceType":"module"}