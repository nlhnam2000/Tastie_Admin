{"ast":null,"code":"var _jsxFileName = \"/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/utilities/ProviderRequest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types'; // material-ui\n\nimport { Box, Card, Grid, Button } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid'; // project imports\n\nimport SubCard from 'ui-component/cards/SubCard';\nimport MainCard from 'ui-component/cards/MainCard';\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\nimport { gridSpacing } from 'store/constant';\nimport { providerColumns } from 'assets/columns/gridData';\nimport { HOST_NAME } from 'config';\nimport axios from 'axios'; // ============================|| UTILITIES SHADOW ||============================ //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProviderRequest = () => {\n  _s();\n\n  const [rows, setRows] = useState([]);\n  const [showButtons, setShowButtons] = useState(false);\n  const [selectedProvider, setSelectedProvider] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const GetAllProvider = async (offset, limit) => {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const res = await axios.post(`http://${HOST_NAME}:3010/v1/api/tastie/admin/get-all-provider`, {\n        limit,\n        offset\n      }, config);\n\n      if (res.data.status) {\n        setRows(res.data.response.filter(item => item.status !== 3));\n      }\n    } catch (error) {\n      console.error('Cannot get all providers', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRemoveProvider = async providerList => {\n    // this function get the array of provider_id to be removed => remove multiple providers\n    try {\n      const removeUser = async providerId => {\n        const res = await axios.put(`http://${HOST_NAME}:3010/v1/api/tastie/admin/remove-provider/${providerId}`);\n        return res.data;\n      };\n\n      const queryList = [];\n      providerList.forEach(providerId => {\n        queryList.push(removeUser(providerId)); // get the query list of removing providers\n      });\n      Promise.all(queryList).then(values => {\n        console.log('Response from removing providers', values);\n        GetAllProvider(1, 10000000); // reload the screen with new data\n      });\n    } catch (error) {\n      console.error('Cannot remove providers', error);\n    }\n  };\n\n  const HandleAcceptRequest = providerList => {\n    console.log('Accepted');\n  };\n\n  const HandleRefuseRequest = providerList => {\n    console.log('Refused');\n  };\n\n  useEffect(() => {\n    GetAllProvider(1, 100000000);\n  }, []);\n  useEffect(() => {\n    setShowButtons(selectedProvider.length > 0);\n  }, [selectedProvider]);\n  return /*#__PURE__*/_jsxDEV(MainCard, {\n    title: \"Provider request\",\n    secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [showButtons && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"error\",\n        onClick: () => handleRemoveProvider(selectedProvider),\n        children: \"Remove provider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"error\",\n        onClick: () => handleRemoveProvider(selectedProvider),\n        children: \"Remove provider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), \")}\"]\n    }, void 0, true),\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: providerColumns,\n      loading: loading,\n      pageSize: 50 // rowsPerPageOptions={[40]}\n      ,\n      checkboxSelection: true,\n      disableSelectionOnClick: true,\n      getRowId: row => row.provider_id,\n      sx: {\n        width: '100%',\n        height: '70vh'\n      },\n      onSelectionModelChange: providerList => {\n        setSelectedProvider(providerList);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProviderRequest, \"wWd+08+7GscKLQKSqJPmT5x8hwU=\");\n\n_c = ProviderRequest;\nexport default ProviderRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderRequest\");","map":{"version":3,"sources":["/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/utilities/ProviderRequest.js"],"names":["React","useEffect","useState","PropTypes","Box","Card","Grid","Button","DataGrid","SubCard","MainCard","SecondaryAction","gridSpacing","providerColumns","HOST_NAME","axios","ProviderRequest","rows","setRows","showButtons","setShowButtons","selectedProvider","setSelectedProvider","loading","setLoading","GetAllProvider","offset","limit","config","headers","res","post","data","status","response","filter","item","error","console","handleRemoveProvider","providerList","removeUser","providerId","put","queryList","forEach","push","Promise","all","then","values","log","HandleAcceptRequest","HandleRefuseRequest","length","row","provider_id","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\n// material-ui\nimport { Box, Card, Grid, Button } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid';\n\n// project imports\nimport SubCard from 'ui-component/cards/SubCard';\nimport MainCard from 'ui-component/cards/MainCard';\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\nimport { gridSpacing } from 'store/constant';\nimport { providerColumns } from 'assets/columns/gridData';\nimport { HOST_NAME } from 'config';\n\nimport axios from 'axios';\n\n// ============================|| UTILITIES SHADOW ||============================ //\n\nconst ProviderRequest = () => {\n    const [rows, setRows] = useState([]);\n    const [showButtons, setShowButtons] = useState(false);\n    const [selectedProvider, setSelectedProvider] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    const GetAllProvider = async (offset, limit) => {\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            };\n            const res = await axios.post(\n                `http://${HOST_NAME}:3010/v1/api/tastie/admin/get-all-provider`,\n                {\n                    limit,\n                    offset\n                },\n                config\n            );\n\n            if (res.data.status) {\n                setRows(res.data.response.filter((item) => item.status !== 3));\n            }\n        } catch (error) {\n            console.error('Cannot get all providers', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleRemoveProvider = async (providerList) => {\n        // this function get the array of provider_id to be removed => remove multiple providers\n        try {\n            const removeUser = async (providerId) => {\n                const res = await axios.put(`http://${HOST_NAME}:3010/v1/api/tastie/admin/remove-provider/${providerId}`);\n\n                return res.data;\n            };\n            const queryList = [];\n            providerList.forEach((providerId) => {\n                queryList.push(removeUser(providerId)); // get the query list of removing providers\n            });\n            Promise.all(queryList).then((values) => {\n                console.log('Response from removing providers', values);\n                GetAllProvider(1, 10000000); // reload the screen with new data\n            });\n        } catch (error) {\n            console.error('Cannot remove providers', error);\n        }\n    };\n\n    const HandleAcceptRequest = (providerList) => {\n        console.log('Accepted');\n    };\n\n    const HandleRefuseRequest = (providerList) => {\n        console.log('Refused');\n    };\n\n    useEffect(() => {\n        GetAllProvider(1, 100000000);\n    }, []);\n\n    useEffect(() => {\n        setShowButtons(selectedProvider.length > 0);\n    }, [selectedProvider]);\n    return (\n        <MainCard\n            title=\"Provider request\"\n            secondary={\n                <>\n                    {showButtons && (\n                        <Button variant=\"contained\" color=\"error\" onClick={() => handleRemoveProvider(selectedProvider)}>\n                            Remove provider\n                        </Button>\n                    )}\n                    <Button variant=\"contained\" color=\"error\" onClick={() => handleRemoveProvider(selectedProvider)}>\n                        Remove provider\n                    </Button>\n                    )}\n                </>\n            }\n        >\n            <DataGrid\n                rows={rows}\n                columns={providerColumns}\n                loading={loading}\n                pageSize={50}\n                // rowsPerPageOptions={[40]}\n                checkboxSelection\n                disableSelectionOnClick\n                getRowId={(row) => row.provider_id}\n                sx={{ width: '100%', height: '70vh' }}\n                onSelectionModelChange={(providerList) => {\n                    setSelectedProvider(providerList);\n                }}\n            />\n        </MainCard>\n    );\n};\n\nexport default ProviderRequest;\n"]},"metadata":{},"sourceType":"module"}