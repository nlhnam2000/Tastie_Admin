{"ast":null,"code":"var _jsxFileName = \"/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/dashboard/Default/TotalGrowthBarChart.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux'; // material-ui\n\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, MenuItem, TextField, Typography } from '@mui/material'; // third-party\n\nimport ApexCharts from 'apexcharts';\nimport Chart from 'react-apexcharts'; // project imports\n\nimport SkeletonTotalGrowthBarChart from 'ui-component/cards/Skeleton/TotalGrowthBarChart';\nimport MainCard from 'ui-component/cards/MainCard';\nimport { gridSpacing } from 'store/constant'; // chart data\n\nimport chartData from './chart-data/total-growth-bar-chart'; // libraries\n\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst status = [{\n  value: 'today',\n  label: 'Today'\n}, {\n  value: 'month',\n  label: 'This Month'\n}, {\n  value: 'year',\n  label: 'This Year'\n}]; // ==============================|| DASHBOARD DEFAULT - TOTAL GROWTH BAR CHART ||============================== //\n\nconst TotalGrowthBarChart = _ref => {\n  _s();\n\n  let {\n    isLoading\n  } = _ref;\n  const [value, setValue] = useState('today');\n  const theme = useTheme();\n  const customization = useSelector(state => state.customization);\n  const [data, setData] = useState([]);\n  const {\n    navType\n  } = customization;\n  const {\n    primary\n  } = theme.palette.text;\n  const darkLight = theme.palette.dark.light;\n  const grey200 = theme.palette.grey[200];\n  const grey500 = theme.palette.grey[500];\n  const primary200 = theme.palette.primary[200];\n  const primaryDark = theme.palette.primary.dark;\n  const secondaryMain = theme.palette.secondary.main;\n  const secondaryLight = theme.palette.secondary.light;\n\n  const toMonths = data => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    return data.map(item => months[item - 1]);\n  };\n\n  const LoadData = async () => {\n    try {\n      const res = await axios.get('http://localhost:3010/v1/api/tastie/admin/statics-of-total-revenue-in-the-last-12-month');\n\n      if (res.data.status && res.data.response.length > 0) {\n        setData(res.data.response);\n      }\n    } catch (error) {\n      console.error('Cannot get data of last 12 months');\n    }\n  };\n\n  useEffect(() => {\n    LoadData();\n  }, []);\n  useEffect(() => {\n    const newChartData = { ...chartData.options,\n      colors: [primary200, primaryDark, secondaryMain, secondaryLight],\n      xaxis: {\n        labels: {\n          style: {\n            colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary]\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: [primary]\n          }\n        }\n      },\n      grid: {\n        borderColor: grey200\n      },\n      tooltip: {\n        theme: 'light'\n      },\n      legend: {\n        labels: {\n          colors: grey500\n        }\n      }\n    }; // do not load chart when loading\n\n    if (!isLoading) {\n      ApexCharts.exec(`bar-chart`, 'updateOptions', newChartData);\n    }\n  }, [navType, primary200, primaryDark, secondaryMain, secondaryLight, primary, darkLight, grey200, isLoading, grey500]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(SkeletonTotalGrowthBarChart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(MainCard, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: gridSpacing,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                direction: \"column\",\n                spacing: 1,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"subtitle2\",\n                    children: \"Total Growth\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 128,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h3\",\n                    children: \"$2,324.00\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 131,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"standard-select-currency\",\n                select: true,\n                value: value,\n                onChange: e => setValue(e.target.value),\n                children: status.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: option.value,\n                  children: option.label\n                }, option.value, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Chart, { ...chartData,\n            options: {\n              xaxis: {\n                type: 'category',\n                categories: toMonths(...data.map(item => item.month))\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(TotalGrowthBarChart, \"slHOjPi/C9FgNmB/3DakEDUibzU=\", false, function () {\n  return [useTheme, useSelector];\n});\n\n_c = TotalGrowthBarChart;\nTotalGrowthBarChart.propTypes = {\n  isLoading: PropTypes.bool\n};\nexport default TotalGrowthBarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"TotalGrowthBarChart\");","map":{"version":3,"sources":["/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/dashboard/Default/TotalGrowthBarChart.js"],"names":["PropTypes","useState","useEffect","useSelector","useTheme","Grid","MenuItem","TextField","Typography","ApexCharts","Chart","SkeletonTotalGrowthBarChart","MainCard","gridSpacing","chartData","axios","status","value","label","TotalGrowthBarChart","isLoading","setValue","theme","customization","state","data","setData","navType","primary","palette","text","darkLight","dark","light","grey200","grey","grey500","primary200","primaryDark","secondaryMain","secondary","main","secondaryLight","toMonths","months","map","item","LoadData","res","get","response","length","error","console","newChartData","options","colors","xaxis","labels","style","yaxis","grid","borderColor","tooltip","legend","exec","e","target","option","type","categories","month","propTypes","bool"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Grid, MenuItem, TextField, Typography } from '@mui/material';\r\n\r\n// third-party\r\nimport ApexCharts from 'apexcharts';\r\nimport Chart from 'react-apexcharts';\r\n\r\n// project imports\r\nimport SkeletonTotalGrowthBarChart from 'ui-component/cards/Skeleton/TotalGrowthBarChart';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// chart data\r\nimport chartData from './chart-data/total-growth-bar-chart';\r\n\r\n// libraries\r\nimport axios from 'axios';\r\n\r\nconst status = [\r\n    {\r\n        value: 'today',\r\n        label: 'Today'\r\n    },\r\n    {\r\n        value: 'month',\r\n        label: 'This Month'\r\n    },\r\n    {\r\n        value: 'year',\r\n        label: 'This Year'\r\n    }\r\n];\r\n\r\n// ==============================|| DASHBOARD DEFAULT - TOTAL GROWTH BAR CHART ||============================== //\r\n\r\nconst TotalGrowthBarChart = ({ isLoading }) => {\r\n    const [value, setValue] = useState('today');\r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n    const [data, setData] = useState([]);\r\n\r\n    const { navType } = customization;\r\n    const { primary } = theme.palette.text;\r\n    const darkLight = theme.palette.dark.light;\r\n    const grey200 = theme.palette.grey[200];\r\n    const grey500 = theme.palette.grey[500];\r\n\r\n    const primary200 = theme.palette.primary[200];\r\n    const primaryDark = theme.palette.primary.dark;\r\n    const secondaryMain = theme.palette.secondary.main;\r\n    const secondaryLight = theme.palette.secondary.light;\r\n\r\n    const toMonths = (data) => {\r\n        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n        return data.map((item) => months[item - 1]);\r\n    };\r\n\r\n    const LoadData = async () => {\r\n        try {\r\n            const res = await axios.get('http://localhost:3010/v1/api/tastie/admin/statics-of-total-revenue-in-the-last-12-month');\r\n            if (res.data.status && res.data.response.length > 0) {\r\n                setData(res.data.response);\r\n            }\r\n        } catch (error) {\r\n            console.error('Cannot get data of last 12 months');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        LoadData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const newChartData = {\r\n            ...chartData.options,\r\n            colors: [primary200, primaryDark, secondaryMain, secondaryLight],\r\n            xaxis: {\r\n                labels: {\r\n                    style: {\r\n                        colors: [primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary, primary]\r\n                    }\r\n                }\r\n            },\r\n            yaxis: {\r\n                labels: {\r\n                    style: {\r\n                        colors: [primary]\r\n                    }\r\n                }\r\n            },\r\n            grid: {\r\n                borderColor: grey200\r\n            },\r\n            tooltip: {\r\n                theme: 'light'\r\n            },\r\n            legend: {\r\n                labels: {\r\n                    colors: grey500\r\n                }\r\n            }\r\n        };\r\n\r\n        // do not load chart when loading\r\n        if (!isLoading) {\r\n            ApexCharts.exec(`bar-chart`, 'updateOptions', newChartData);\r\n        }\r\n    }, [navType, primary200, primaryDark, secondaryMain, secondaryLight, primary, darkLight, grey200, isLoading, grey500]);\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonTotalGrowthBarChart />\r\n            ) : (\r\n                <MainCard>\r\n                    <Grid container spacing={gridSpacing}>\r\n                        <Grid item xs={12}>\r\n                            <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                                <Grid item>\r\n                                    <Grid container direction=\"column\" spacing={1}>\r\n                                        <Grid item>\r\n                                            <Typography variant=\"subtitle2\">Total Growth</Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography variant=\"h3\">$2,324.00</Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        id=\"standard-select-currency\"\r\n                                        select\r\n                                        value={value}\r\n                                        onChange={(e) => setValue(e.target.value)}\r\n                                    >\r\n                                        {status.map((option) => (\r\n                                            <MenuItem key={option.value} value={option.value}>\r\n                                                {option.label}\r\n                                            </MenuItem>\r\n                                        ))}\r\n                                    </TextField>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Chart\r\n                                {...chartData}\r\n                                options={{\r\n                                    xaxis: {\r\n                                        type: 'category',\r\n                                        categories: toMonths(...data.map((item) => item.month))\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </MainCard>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nTotalGrowthBarChart.propTypes = {\r\n    isLoading: PropTypes.bool\r\n};\r\n\r\nexport default TotalGrowthBarChart;\r\n"]},"metadata":{},"sourceType":"module"}