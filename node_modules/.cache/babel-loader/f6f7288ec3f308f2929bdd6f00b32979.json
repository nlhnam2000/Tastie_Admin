{"ast":null,"code":"var _jsxFileName = \"/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/utilities/EcouponList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Card, Dialog, DialogActions, DialogContentText, DialogTitle, DialogContent, Button } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid'; // project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\nimport { ecouponColumns } from 'assets/columns/gridData'; // assets\n\nimport LinkIcon from '@mui/icons-material/Link'; // libraries\n\nimport axios from 'axios'; // styles\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IFrameWrapper = styled('iframe')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    height: 'calc(100vh - 210px)',\n    border: '1px solid',\n    borderColor: theme.palette.primary.light\n  };\n}); // =============================|| TABLER ICONS ||============================= //\n\nconst EcouponList = () => {\n  _s();\n\n  const [rows, setRows] = useState([]);\n  const [openModal, setOpenModal] = useState(false);\n  const [formData, setFormData] = useState({});\n\n  const formatDate = date => {\n    const d = new Date(date);\n    let month = (d.getMonth() + 1).toString();\n    let day = d.getDate().toString();\n    const year = d.getFullYear();\n    if (month.length < 2) month = `${'0'} + month`;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  };\n\n  const GetAllEcoupon = async (offset, limit) => {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const res = await axios.post('http://localhost:3010/v1/api/tastie/admin/get-all-ecoupon', {\n        limit,\n        offset\n      }, config);\n\n      if (res.data.status) {\n        setRows(res.data.response);\n      }\n    } catch (error) {\n      console.error('Cannot get all ecoupons', error);\n    }\n  };\n\n  const handleUpdateRow = async formData => {\n    try {\n      const res = await axios.post('http://localhost:3010/v1/api/tastie/admin/update-ecoupon', formData);\n\n      if (res.data.status) {\n        await GetAllEcoupon(1, 50);\n      }\n    } catch (error) {\n      console.error('Cannot update ecoupon', error);\n    }\n  };\n\n  useEffect(() => {\n    GetAllEcoupon(1, 50);\n  }, []);\n  useEffect(() => {\n    console.log(formData);\n  }, [formData]);\n  return /*#__PURE__*/_jsxDEV(MainCard, {\n    title: \"Ecoupon List\",\n    secondary: /*#__PURE__*/_jsxDEV(SecondaryAction, {\n      icon: /*#__PURE__*/_jsxDEV(LinkIcon, {\n        fontSize: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 74\n      }, this),\n      link: \"https://tablericons.com/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 51\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: ecouponColumns,\n      pageSize: 50 // rowsPerPageOptions={[40]}\n      ,\n      checkboxSelection: true,\n      disableSelectionOnClick: true,\n      getRowId: row => row.ecoupon_id,\n      sx: {\n        width: '100%',\n        height: 500\n      } // onPageChange={(page) => alert(page)}\n      ,\n      onCellEditCommit: event => {\n        const rowEdited = rows.find(row => row.ecoupon_id === event.id);\n        setFormData(prev => ({ ...prev,\n          ...rowEdited,\n          start_date: formatDate(rowEdited.start_date),\n          expire_date: formatDate(rowEdited.expire_date),\n          update_at: formatDate(rowEdited.update_at),\n          [event.field]: event.value\n        })); // setOpenModal(true);\n        // const formData = {\n        //     ...rowEdited,\n        //     [event.field]: event.value\n        // };\n        // console.log(formData);\n        // handleUpdateRow(formData);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Dialog, {\n        open: openModal,\n        onClose: () => setOpenModal(false),\n        \"aria-labelledby\": \"alert-dialog-title\",\n        \"aria-describedby\": \"alert-dialog-description\",\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          id: \"alert-dialog-title\",\n          children: \"Are you sure to apply the changes ?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(DialogContentText, {\n            id: \"alert-dialog-description\",\n            children: \"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setOpenModal(false),\n            children: \"Disagree\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handleUpdateRow(formData),\n            autoFocus: true,\n            children: \"Agree\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EcouponList, \"QHhCIwzr7k+mlJznDupNC288K/w=\");\n\n_c = EcouponList;\nexport default EcouponList;\n\nvar _c;\n\n$RefreshReg$(_c, \"EcouponList\");","map":{"version":3,"sources":["/Users/hoangnam/4thYear/FinalProject/Tastie_Admin/src/views/utilities/EcouponList.js"],"names":["React","useEffect","useState","styled","Card","Dialog","DialogActions","DialogContentText","DialogTitle","DialogContent","Button","DataGrid","MainCard","SecondaryAction","ecouponColumns","LinkIcon","axios","IFrameWrapper","theme","height","border","borderColor","palette","primary","light","EcouponList","rows","setRows","openModal","setOpenModal","formData","setFormData","formatDate","date","d","Date","month","getMonth","toString","day","getDate","year","getFullYear","length","join","GetAllEcoupon","offset","limit","config","headers","res","post","data","status","response","error","console","handleUpdateRow","log","row","ecoupon_id","width","event","rowEdited","find","id","prev","start_date","expire_date","update_at","field","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport { Card, Dialog, DialogActions, DialogContentText, DialogTitle, DialogContent, Button } from '@mui/material';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\r\nimport { ecouponColumns } from 'assets/columns/gridData';\r\n\r\n// assets\r\nimport LinkIcon from '@mui/icons-material/Link';\r\n\r\n// libraries\r\nimport axios from 'axios';\r\n\r\n// styles\r\nconst IFrameWrapper = styled('iframe')(({ theme }) => ({\r\n    height: 'calc(100vh - 210px)',\r\n    border: '1px solid',\r\n    borderColor: theme.palette.primary.light\r\n}));\r\n\r\n// =============================|| TABLER ICONS ||============================= //\r\n\r\nconst EcouponList = () => {\r\n    const [rows, setRows] = useState([]);\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [formData, setFormData] = useState({});\r\n\r\n    const formatDate = (date) => {\r\n        const d = new Date(date);\r\n        let month = (d.getMonth() + 1).toString();\r\n        let day = d.getDate().toString();\r\n        const year = d.getFullYear();\r\n\r\n        if (month.length < 2) month = `${'0'} + month`;\r\n        if (day.length < 2) day = '0' + day;\r\n\r\n        return [year, month, day].join('-');\r\n    };\r\n\r\n    const GetAllEcoupon = async (offset, limit) => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            };\r\n            const res = await axios.post(\r\n                'http://localhost:3010/v1/api/tastie/admin/get-all-ecoupon',\r\n                {\r\n                    limit,\r\n                    offset\r\n                },\r\n                config\r\n            );\r\n\r\n            if (res.data.status) {\r\n                setRows(res.data.response);\r\n            }\r\n        } catch (error) {\r\n            console.error('Cannot get all ecoupons', error);\r\n        }\r\n    };\r\n\r\n    const handleUpdateRow = async (formData) => {\r\n        try {\r\n            const res = await axios.post('http://localhost:3010/v1/api/tastie/admin/update-ecoupon', formData);\r\n            if (res.data.status) {\r\n                await GetAllEcoupon(1, 50);\r\n            }\r\n        } catch (error) {\r\n            console.error('Cannot update ecoupon', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        GetAllEcoupon(1, 50);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(formData);\r\n    }, [formData]);\r\n\r\n    return (\r\n        <MainCard title=\"Ecoupon List\" secondary={<SecondaryAction icon={<LinkIcon fontSize=\"small\" />} link=\"https://tablericons.com/\" />}>\r\n            {/* <Card sx={{ overflow: 'hidden' }}>\r\n            <IFrameWrapper title=\"Tabler Icons\" width=\"100%\" src=\"https://tablericons.com/\" />\r\n        </Card> */}\r\n            <DataGrid\r\n                rows={rows}\r\n                columns={ecouponColumns}\r\n                pageSize={50}\r\n                // rowsPerPageOptions={[40]}\r\n                checkboxSelection\r\n                disableSelectionOnClick\r\n                getRowId={(row) => row.ecoupon_id}\r\n                sx={{ width: '100%', height: 500 }}\r\n                // onPageChange={(page) => alert(page)}\r\n                onCellEditCommit={(event) => {\r\n                    const rowEdited = rows.find((row) => row.ecoupon_id === event.id);\r\n                    setFormData((prev) => ({\r\n                        ...prev,\r\n                        ...rowEdited,\r\n                        start_date: formatDate(rowEdited.start_date),\r\n                        expire_date: formatDate(rowEdited.expire_date),\r\n                        update_at: formatDate(rowEdited.update_at),\r\n                        [event.field]: event.value\r\n                    }));\r\n                    // setOpenModal(true);\r\n                    // const formData = {\r\n                    //     ...rowEdited,\r\n                    //     [event.field]: event.value\r\n                    // };\r\n                    // console.log(formData);\r\n                    // handleUpdateRow(formData);\r\n                }}\r\n            />\r\n            <div>\r\n                <Dialog\r\n                    open={openModal}\r\n                    onClose={() => setOpenModal(false)}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">Are you sure to apply the changes ?</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                            Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps\r\n                            are running.\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={() => setOpenModal(false)}>Disagree</Button>\r\n                        <Button onClick={() => handleUpdateRow(formData)} autoFocus>\r\n                            Agree\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default EcouponList;\r\n"]},"metadata":{},"sourceType":"module"}